#!/usr/bin/env node

/**
 * Type Generation Script for StockWise Frontend
 *
 * This script fetches the OpenAPI schema from the backend and generates
 * TypeScript types for the frontend to use.
 */

import fs from "fs";
import path from "path";
import { execSync } from "child_process";
import { fileURLToPath } from "url";

// Get current directory in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration
const BACKEND_URL = process.env.VITE_API_BASE_URL || "http://localhost:8000";
const OPENAPI_URL = `${BACKEND_URL}/openapi.json`;
const TYPES_OUTPUT_DIR = path.join(
  __dirname,
  "..",
  "src",
  "types",
  "generated"
);
const TYPES_OUTPUT_FILE = path.join(TYPES_OUTPUT_DIR, "api-types.ts");

console.log("üöÄ Starting type generation for StockWise API...");

async function generateTypes() {
  try {
    // Ensure output directory exists
    if (!fs.existsSync(TYPES_OUTPUT_DIR)) {
      fs.mkdirSync(TYPES_OUTPUT_DIR, { recursive: true });
      console.log(`üìÅ Created output directory: ${TYPES_OUTPUT_DIR}`);
    }

    // Check if backend is running
    console.log(`üîç Checking backend availability at ${BACKEND_URL}...`);

    try {
      const healthCheck = await fetch(`${BACKEND_URL}/health`);
      if (!healthCheck.ok) {
        throw new Error(`Backend health check failed: ${healthCheck.status}`);
      }
      console.log("‚úÖ Backend is running");
    } catch (error) {
      console.error(
        "‚ùå Backend is not accessible. Make sure it's running at",
        BACKEND_URL
      );
      console.error("   Run: make run  (from backend directory)");
      process.exit(1);
    }

    // Fetch OpenAPI schema
    console.log(`üì• Fetching OpenAPI schema from ${OPENAPI_URL}...`);
    const response = await fetch(OPENAPI_URL);

    if (!response.ok) {
      throw new Error(
        `Failed to fetch OpenAPI schema: ${response.status} ${response.statusText}`
      );
    }

    const openApiSchema = await response.json();
    console.log("‚úÖ OpenAPI schema fetched successfully");

    // Save schema to temporary file
    const tempSchemaFile = path.join(__dirname, "..", "temp-openapi.json");
    fs.writeFileSync(tempSchemaFile, JSON.stringify(openApiSchema, null, 2));

    // Generate TypeScript types using openapi-typescript
    console.log("‚öôÔ∏è  Generating TypeScript types...");
    const openapiTypescriptPath = path.join(
      __dirname,
      "..",
      "node_modules",
      ".bin",
      "openapi-typescript"
    );

    execSync(
      `"${openapiTypescriptPath}" "${tempSchemaFile}" --output "${TYPES_OUTPUT_FILE}"`,
      {
        stdio: "inherit",
      }
    );

    // Clean up temp file
    fs.unlinkSync(tempSchemaFile);

    // Add header to generated file
    const generatedContent = fs.readFileSync(TYPES_OUTPUT_FILE, "utf8");
    const headerComment = `/**
 * Auto-generated TypeScript types for StockWise API
 * 
 * Generated on: ${new Date().toISOString()}
 * Source: ${OPENAPI_URL}
 * 
 * ‚ö†Ô∏è  DO NOT EDIT THIS FILE MANUALLY
 * Run 'npm run generate-types' to regenerate
 */

`;

    fs.writeFileSync(TYPES_OUTPUT_FILE, headerComment + generatedContent);

    console.log("‚úÖ Type generation completed successfully!");
    console.log(`üìÑ Types saved to: ${TYPES_OUTPUT_FILE}`);

    // Generate index file for easier imports
    const indexContent = `// Auto-generated API types index
export * from './api-types';

// Re-export common types for convenience
export type {
  paths,
  components,
  operations,
} from './api-types';

// Extract and re-export individual schema types for easier importing
import type { components } from './api-types';

type Schemas = components['schemas'];

export type User = Schemas['User'];
export type Holding = Schemas['Holding'];
export type HoldingCreate = Schemas['HoldingCreate'];
export type HoldingUpdate = Schemas['HoldingUpdate'];
export type PortfolioSummary = Schemas['PortfolioSummary'];
export type AllocationData = Schemas['AllocationData'];
export type InsightResponse = Schemas['InsightResponse'];
export type Token = Schemas['Token'];
export type AssetType = Schemas['AssetType'];
export type AIInsight = Schemas['AIInsight'];
export type RiskSummary = Schemas['RiskSummary'];
export type ConcentrationAlert = Schemas['ConcentrationAlert'];
export type DiversificationSuggestion = Schemas['DiversificationSuggestion'];
`;

    fs.writeFileSync(path.join(TYPES_OUTPUT_DIR, "index.ts"), indexContent);
    console.log(
      `üìÑ Index file created: ${path.join(TYPES_OUTPUT_DIR, "index.ts")}`
    );
  } catch (error) {
    console.error("‚ùå Type generation failed:", error.message);
    process.exit(1);
  }
}

// Run the generation
generateTypes();
